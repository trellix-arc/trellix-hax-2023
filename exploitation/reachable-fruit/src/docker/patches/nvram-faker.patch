diff --git a/nvram-faker-internal.h b/nvram-faker-internal.h
index ea0fa0c..b6581a2 100644
--- a/nvram-faker-internal.h
+++ b/nvram-faker-internal.h
@@ -2,7 +2,7 @@
 #define __nvram_faker_internal_h
 
 #ifndef INI_FILE_PATH
-#define INI_FILE_PATH "/nvram.ini"
+#define INI_FILE_PATH "/etc/nvram.ini"
 #endif
 
 #ifndef INI_MAX_LINE
diff --git a/nvram-faker.c b/nvram-faker.c
index c12dffa..c2ec4ac 100644
--- a/nvram-faker.c
+++ b/nvram-faker.c
@@ -2,7 +2,7 @@
 #include <stdio.h>
 #include <string.h>
 #include "nvram-faker.h"
-//include before ini.h to override ini.h defaults
+// include before ini.h to override ini.h defaults
 #include "nvram-faker-internal.h"
 #include "ini.h"
 
@@ -10,53 +10,60 @@
 #define RED_OFF "\033[22;00m"
 #define DEFAULT_KV_PAIR_LEN 1024
 
-static int kv_count=0;
-static int key_value_pair_len=DEFAULT_KV_PAIR_LEN;
-static char **key_value_pairs=NULL;
+static int kv_count = 0;
+static int key_value_pair_len = DEFAULT_KV_PAIR_LEN;
+static char **key_value_pairs = NULL;
 
-static int ini_handler(void *user, const char *section, const char *name,const char *value)
+static int ini_handler(void *user, const char *section, const char *name, const char *value)
 {
 
     int old_kv_len;
     char **kv;
     char **new_kv;
     int i;
-    
-    if(NULL == user || NULL == section || NULL == name || NULL == value)
+
+    if (NULL == user || NULL == section || NULL == name || NULL == value)
     {
         DEBUG_PRINTF("bad parameter to ini_handler\n");
         return 0;
     }
     kv = *((char ***)user);
-    if(NULL == kv)
+    if (NULL == kv)
     {
         LOG_PRINTF("kv is NULL\n");
         return 0;
     }
-    
-    DEBUG_PRINTF("kv_count: %d, key_value_pair_len: %d\n", kv_count,key_value_pair_len);
-    if(kv_count >= key_value_pair_len)
+
+    DEBUG_PRINTF("kv_count: %d, key_value_pair_len: %d\n", kv_count, key_value_pair_len);
+    if (kv_count >= key_value_pair_len)
     {
-        old_kv_len=key_value_pair_len;
-        key_value_pair_len=(key_value_pair_len * 2);
-        new_kv=(char **)malloc(key_value_pair_len * sizeof(char **));
-        if(NULL == kv)
+        old_kv_len = key_value_pair_len;
+        key_value_pair_len = (key_value_pair_len * 2);
+        new_kv = (char **)malloc(key_value_pair_len * sizeof(char **));
+        if (NULL == kv)
         {
             LOG_PRINTF("Failed to reallocate key value array.\n");
             return 0;
         }
-        for(i=0;i<old_kv_len;i++)
+        for (i = 0; i < old_kv_len; i++)
         {
-            new_kv[i]=kv[i];
+            new_kv[i] = kv[i];
         }
         free(*(char ***)user);
-        kv=new_kv;
-        *(char ***)user=kv;
+        kv = new_kv;
+        *(char ***)user = kv;
+    }
+    DEBUG_PRINTF("Got %s:%s\n", name, value);
+    for (i = 0; i < kv_count; i += 2)
+        if (strcmp(name, kv[i]) == 0)
+            break;
+    if (i == kv_count)
+    {
+        kv[kv_count++] = strdup(name);
+        kv[kv_count++] = strdup(value);
     }
-    DEBUG_PRINTF("Got %s:%s\n",name,value);
-    kv[kv_count++]=strdup(name);
-    kv[kv_count++]=strdup(value);
-    
+    else
+        strcpy(kv[i + 1], value);
     return 1;
 }
 
@@ -66,71 +73,101 @@ void initialize_ini(void)
     DEBUG_PRINTF("Initializing.\n");
     if (NULL == key_value_pairs)
     {
-        key_value_pairs=malloc(key_value_pair_len * sizeof(char **));
+        key_value_pairs = malloc(key_value_pair_len * sizeof(char **));
     }
-    if(NULL == key_value_pairs)
+    if (NULL == key_value_pairs)
     {
         LOG_PRINTF("Failed to allocate memory for key value array. Terminating.\n");
         exit(1);
     }
-    
-    ret = ini_parse(INI_FILE_PATH,ini_handler,(void *)&key_value_pairs);
+
+    ret = ini_parse(INI_FILE_PATH, ini_handler, (void *)&key_value_pairs);
     if (0 != ret)
     {
-        LOG_PRINTF("ret from ini_parse was: %d\n",ret);
+        LOG_PRINTF("ret from ini_parse was: %d\n", ret);
         LOG_PRINTF("INI parse failed. Terminating\n");
         free(key_value_pairs);
-        key_value_pairs=NULL;
+        key_value_pairs = NULL;
         exit(1);
-    }else
+    }
+    else
     {
-        DEBUG_PRINTF("ret from ini_parse was: %d\n",ret);
+        DEBUG_PRINTF("ret from ini_parse was: %d\n", ret);
     }
-    
+
     return;
-    
 }
 
 void end(void)
 {
     int i;
-    for (i=0;i<kv_count;i++)
+    for (i = 0; i < kv_count; i++)
     {
         free(key_value_pairs[i]);
     }
     free(key_value_pairs);
-    key_value_pairs=NULL;
-    
+    key_value_pairs = NULL;
+
     return;
 }
 
 char *nvram_get(const char *key)
 {
     int i;
-    int found=0;
+    int found = 0;
     char *value;
     char *ret;
-    for(i=0;i<kv_count;i+=2)
+    for (i = 0; i < kv_count; i += 2)
     {
-        if(strcmp(key,key_value_pairs[i]) == 0)
+        if (strcmp(key, key_value_pairs[i]) == 0)
         {
-            LOG_PRINTF("%s=%s\n",key,key_value_pairs[i+1]);
+            LOG_PRINTF("%s=%s\n", key, key_value_pairs[i + 1]);
             found = 1;
-            value=key_value_pairs[i+1];
+            value = key_value_pairs[i + 1];
             break;
         }
     }
 
     ret = NULL;
-    if(!found)
+    if (!found)
     {
-            LOG_PRINTF( RED_ON"%s=Unknown\n"RED_OFF,key);
-    }else
+        LOG_PRINTF(RED_ON "%s=Unknown\n" RED_OFF, key);
+    }
+    else
     {
 
-            ret=strdup(value);
+        ret = strdup(value);
     }
     return ret;
 }
 
+int nvram_set(const char *key, const char *value)
+{
+    int i;
+
+    for (i = 0; i < kv_count; i += 2)
+        if (strcmp(key, key_value_pairs[i]) == 0)
+            break;
+    // LOG_PRINTF("\033[22;%dm%s=%s\033[22;00m\n", (i == kv_count) ? 32 /* green */ : 34 /* blue */, key, value);
+    LOG_PRINTF("\033[22;%dm%s=%s\033[22;00m", (i == kv_count) ? 32 /* green */ : 34 /* blue */, key, value);
+    ini_handler((void *)&key_value_pairs, "", key, value);
+    return strlen(key_value_pairs[i + 1]);
+}
+
+int nvram_unset(const char *key) {
+    char* value;
+    int i;
 
+    value = NULL;
+    for (i = 0; i < kv_count; i += 2)
+        if (strcmp(key, key_value_pairs[i]) == 0) {
+            value = key_value_pairs[i + 1];
+            break;
+        }
+    LOG_PRINTF("UNSET \033[22;%dm%s=%s\033[22;00m", (value == NULL) ? 32 /* green */ : 31 /* red */, key, (value == NULL) ? "" : value);
+    return 0;
+}
+
+int nvram_commit() {
+    return 0;
+}
diff --git a/nvram-faker.h b/nvram-faker.h
index d32d498..4990058 100644
--- a/nvram-faker.h
+++ b/nvram-faker.h
@@ -2,5 +2,8 @@
 #define __NVRAM_FAKER_H__
 
 char *nvram_get(const char *key);
+int nvram_set(const char *key, const char *value);
+int nvram_unset(const char *key);
+int nvram_commit();
 
 #endif /* __NVRAM_FAKER_H__ */
diff --git a/nvram.ini b/nvram.ini
index 64ce226..51e2043 100644
--- a/nvram.ini
+++ b/nvram.ini
@@ -1,41 +1,11 @@
 [config]
-os_name=linux
-os_version=1
-upnp_port=9999
-upnp_ad_time=30
-upnp_sub_timeout=60
-upnp_conn_retries=10
-log_level=10
-lan_hwaddr=52:54:00:12:34:58
-lan_ifname=eth0
-lan1_ifname=wlan0
-upnp_turn_on=1
-lan_ipaddr=192.168.127.141
-friendly_name=littlebitch
-upnp_duration=3600
-upnp_advert_ttl=4
-upnp_advert_period=30
-wps_device_pin=12345678
-wps_version2=enabled
-wps_config_method=0x284
-wps_aplockdown_forceon=0
-wps_lock_start_cnt=3
-wps_lock_forever_cnt=3
-wps_aplockdown_disable=0
-wps_mixedmode=2
-wps_random_ssid_prefix=foobar
-wps_randomssid=foobar_ssid
-lan_ifnames=eth0
-wan_ifnames=eth0
+time_zone=America/Los_Angeles
+console_loglevel=7
+lan_proto=dhcp
 router_disable=0
-wps_device_name=r6200qemu
-wps_mfstring=netgear
-wps_modelname=r6200
-wps_modelnum=1
-boardnum=1
-wps_wer_mode=allow
-wfa_port=9999
-wfa_adv_time=30
-wps_version2_num=1
-wps_pbc_apsta=enabled
-wps_ess_num=1
+Language=EN
+wirelessMgmt=1
+http_username=admin
+http_passwd=8^hj%u^40D8b8%lx47n0
+http_timeout=60
+wl_wme=on
