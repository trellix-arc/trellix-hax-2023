ARC{ B0Om _th3 re_g o35_ 7h3_ d7n4 m1t3 }
0123 0123 0123 0123 0123 0123 0123 0123 0
G1   G2   G3   G4   G5   G6   G7   G8   G9

Input:
ARC{ } (0x20)(0x4d)(0x21)(0x10)(0x22)(0x56)(0x23)(0x10) 44nn77dd 7h3_ _53o B_r 0te 0h_ m3g
0123 4  4     4     4     4     4     4     4     4     44444444 4444 4444 000 111 222 333
                                                               16   20  24
G1
    - Checks if first values in stack 0-3 are ARC{
    - ARC{ are directly added to the 4 stacks

G2, G3, G4
    - Direct stack checks

G5
    - Checks to see if the '_' is in certain spot on the 4th stack
    - If addition is done with the 4th stack having that length then it performs checks

G6
    - Checks to see if the '_' is in certain spot on the 4th stack
    - If subtraction is done with the 4th stack having that length then it performs checks

G7
    - Checks to make sure 4 ands are done
    - Checks values after 4 ands
    - Moves the values into position


G8
    - Checks for 4 xors done after one of the values in the xor is one of the positional ones
    - Check that on stack 4, items 1, 3, 5, and 7 start at 0x20 (position 1) and increase by 1 each time
    - Checks for values in z3 script

G9
    - Program checks if last value in stack 0 is }
    - Added to stack 4 and moved over at the very end